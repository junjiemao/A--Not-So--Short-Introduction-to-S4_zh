\documentclass[12pt,a4paper]{article}
%%%%%%%%%%%%%%%%%%%%导言区%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{fontspec}
\usepackage{xeCJK}
\setmainfont{Ubuntu}%缺省英文字体 Times New Roman                          
\setCJKmainfont{文泉驿微米黑}%衬线字体 缺省中文字体为    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title{一份（不那么）简短的S4类的介绍\\[2ex]R中的面向对象的编程}
\author{Christophe Genolini{ }\\ HatMatrix翻译}

\begin{document}
\maketitle

\part{初步}
\section{介绍}
这是一份对于R（或者S4类）的面向对象编程的指导。它不需要事先了解面向对象编程的，但是少量的关于R
的知识和对编程的大致了解还是必须的。对于那些完全的新手来说，看看章节D和第66提供的一些手册和书籍。
\subsection{序言：哲学和计算机科学}
你将要阅读一本关于面向对象编程的指导手册，你将因此学习一种新的方法。你将或知道不是存在“一种”而是“很多种”编程的方法：在这个议题上，数据处理专家并不总是同意。
这份指导手册紧跟当前的观点（XXX）。一些非常有能力的人同意这一点，另外一些这不同意……所以这份手册讲过出现好几种观点。
因此，警告读者，在你手中握有所有的元素，你又能力自己来判断并且自由地选择你自己的概念，知识之光……它是没有生命的盛大？（法语的Elle n’est pas
belle la vie?Google翻译的，不知道什么意思）

\subsection{什么是S4}
S4是S语言的第四版本。S语言有两种实现：商业的S-plus和自由的R。s4向比较与S3增加的主要特性是开发函数的时候允许把S语言当作是一门面向对象的语言\footnote{允许当作面向对象的不知转换为面向对象的，在任何情况下，R都不是一门面向对象的语言，仍然是一门传统的编程语言，使用进一步的封装来解释(XXX),迫不及待想发现R++了(类比c和c++——译注)}。通过扩展，S4代表了S语言的面向对象编程，因此也代表了R和S-plus的面向对象的编程。

\subsection{什么是面向对象的编程}
一个对象是一些列变量和函数的集合，他们关注的是同一个主题——这个对象本身。是不是很不清晰？让我们来据一个例子：一个称之为“image”的对象包含了多个变量，这些变量（比如像图像的大小，压缩的模式，图像本省)使得定义图像变得可能并且包含一些用于处理这个图像的函数（比如blackAnWhite()函数或者resizing()函数)。

\subsection{为什么要使用面向对象编程}
作为一个新手来说，面向对象是一个复杂的东西并且其优势并补那么明显：它必须在事先考虑好程序的各个方面，对问题的建模，对类型的选择，对包含其中的各个对象之间的联系等等都要有考虑。各种缺点。因此，很合理的一个问题是：为什么要使用面向对象编程呢？
\subsubsection{传统编程}
让我们据一个例子来比较传统的编程和面向对象编程的区别。BMI（Body Mass Index，体重指数）是一个衡量胖瘦的度量，是通过体重（千克）除以身高（米，原文说的是厘米，应该有误）的平方。那么，可以得出：
\begin{itemize}
  \item 20<BMI<25:一切安好
  \item 25<BMI<30:泰迪熊
  \item 30<BMI<40:柔软舒适的泰迪熊
  \item 40<BMI：大泰迪熊，具有双倍的柔软度，但是应该尽快去看医生了
  \item 18<BMI<20:芭比娃娃
  \item 16<BMI<18:芭比娃娃模特
  \item BMI<16:芭比骷髅，和大泰迪熊一起去看医生吧，注意了哦
\end{itemize}
所以我们想计算BMI值，在传统编程中，再简单不过了：
<<calc BMI using traditional programming >>=
#传统方法计算BMI
weight <- 85
size <- 1.84
(BMI <- weight/size^2)
@
到现在为止，没有什么神秘的。如果你想极端两个人——"Me"和"Her"的BMI，你将会这么做：
<<Me and Her BMI>>=
#传统编程计算我的BMI
weightMe <- 85
sizeMe <- 1.84
(BMIMe <- weightMe/sizeMe^2)

#传统编程计算她的BMI
weightHer <- 62
sizeHer <- 1.60
(BMIHer <- weightMe/sizeHer^2)
@
可以工作的哦……只是"Her"被称之为“舒适的泰迪熊”，可是她的体重没有特别重啊！小小检查一下代码就会很快地发现一个小错误：在计算\textbf{BMIHer}的时候是错的，我们用\textbf{sizeHer}除以\textbf{weightMe}而不是\textbf{sizeHer}除以\textbf{weightHer}。自然地，R没有发现错误：从它的观点来看，它做的只是把两个数字相除而已。

\subsubsection{面向对象编程}

\end{document}